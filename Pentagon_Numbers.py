# Pentagonal numbers are generated by the formula, Pn = n(3n - 1)/2.
# The first ten pentagonal numbers are:
#  1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# it can be seen that
# P4 + P7 = 22 + 70 = 92 = P8.
# Their difference, 70 - 22 = 48, is not pentagonal.
# Find the pair of pentagonal numbers, Pj and Pk.
# Their sum and difference are pentagonal.
# D = |Pk - Pj| is minimized.
# What is the value of D?

# lets say that we found the pair A < B
# D = B - A, so B = D + A
# S(um) = A + B = A + D + A = D + 2A
# So actually, we are searching for D and A such that D, A, D+A and D+2A are all pentagonal
# though I don't see how it can actually help us.
#  So we will do a more straighforward search 


# num = n(3n - 1)/2
# 2num = n(3n -1) = 3n*n - n
# (2/3)*num = n*n - n/3
# 1 + isqrt((2/3) * num)) ~ n
from math import isqrt

def pentagonal(n:int):
    return n*(3*n -1)//2

def is_pentagonal(num:int):
    if num<1:
        return False
    n = 1 + isqrt(2*num//3)
    return num == pentagonal(n)

pent_nums =[1, 5, 12, 22, 35, 51, 70, 92, 117, 145]
for i in range(147):
    if i in pent_nums:
        assert is_pentagonal(i), "false negative"
    if i not in pent_nums:
        assert not is_pentagonal(i), "false positive"

upper_limit = 3000 # magic number.
from math import inf
lowest = inf, 0, 0, 0, 0

for a in range(1, upper_limit):
    A = pentagonal(a)
    for b in range(1, a):
        B = pentagonal(b)
        D = A - B
        if not is_pentagonal(D):
            continue
        S = A + B
        if not is_pentagonal(S):
            continue
        print(D)
        lowest_difference_so_far, _, _, _,_ = lowest
        if lowest_difference_so_far > D:
            lowest = D, a, A, b, B

D, a, A, b, B = lowest

print(lowest)